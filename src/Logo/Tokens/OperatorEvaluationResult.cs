using Logo.Interpretation;
using System;

namespace Logo.Tokens
{
    /// <summary>
    /// Encapsulates the results of operator evaluation.
    /// </summary>
    public struct OperatorEvaluationResult : IEquatable<OperatorEvaluationResult>
    {
        /// <summary>
        /// The success or failure of operator evaluation.
        /// </summary>
        public InterpretationResultType Result { get; private set; }

        /// <summary>
        /// The value of the result.
        /// </summary>
        public LogoValue Value { get; private set; }

        /// <summary>
        /// Any error message generated by operator evaluation.
        /// </summary>
        public string Message { get; private set; }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="resultType">The kind of result - successful, failed, or successful but needs more input.</param>
        /// <param name="value">The value of the result.</param>
        /// <param name="message">The error message, if any.</param>
        public OperatorEvaluationResult(InterpretationResultType resultType, LogoValue value, string message = "")
        {
            Result = resultType;
            Value = value;
            Message = message;
        }

        /// <summary>
        /// Equality test method.
        /// </summary>
        /// <param name="obj">The object to compare this against.</param>
        /// <returns>Returns true if the parameter is an <see cref="OperatorEvaluationResult" /> value that is equal to this one, false if not.</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is OperatorEvaluationResult))
            {
                return false;
            }

            return this == (OperatorEvaluationResult)obj;
        }

        /// <summary>
        /// Equality test method.
        /// </summary>
        /// <param name="oer">A value to compare this against.</param>
        /// <returns>True if the parameter is equal to this value, false if not.</returns>
        public bool Equals(OperatorEvaluationResult oer)
        {
            return this == oer;
        }

        /// <summary>
        /// Equality operator.
        /// </summary>
        /// <param name="a">An <see cref="OperatorEvaluationResult" /> value.</param>
        /// <param name="b">A second <see cref="OperatorEvaluationResult"/> value.</param>
        /// <returns>True if all equivalent members of the two parameters are equal, false otherwise.</returns>
        public static bool operator ==(OperatorEvaluationResult a, OperatorEvaluationResult b)
        {
            return a.Result == b.Result && a.Value == b.Value && a.Message == b.Message;
        }

        /// <summary>
        /// Inequality operator.
        /// </summary>
        /// <param name="a">An <see cref="OperatorEvaluationResult" /> value.</param>
        /// <param name="b">A second <see cref="OperatorEvaluationResult"/> value.</param>
        /// <returns>False if all equivalent members of the two parameters are equal, false otherwise.</returns>
        public static bool operator !=(OperatorEvaluationResult a, OperatorEvaluationResult b)
        {
            return a.Result != b.Result || a.Value != b.Value || a.Message != b.Message;
        }

        /// <summary>
        /// Generate a hash code for this value.
        /// </summary>
        /// <returns>A hash code representing this value.</returns>
        public override int GetHashCode()
        {
            return Result.GetHashCode() ^ Value.GetHashCode() ^ (Message?.GetHashCode() ?? 0);
        }
    }
}
